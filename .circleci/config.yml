#
# Copyright 2020 Adobe. All rights reserved.
# This file is licensed to you under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
# OF ANY KIND, either express or implied. See the License for the specific language
# governing permissions and limitations under the License.
#

# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/

version: 2.1

orbs:
  codecov: codecov/codecov@5.4.3
  macos: circleci/macos@2

workflows:
  version: 2
  build-test:
    jobs:
      - validate-code
      - test-ios-core:
          requires:
            - validate-code
      - test-ios-services:
          requires:
            - validate-code
      - test-ios-lifecycle:
          requires:
            - validate-code
      - test-ios-identity:
          requires:
            - validate-code
      - test-ios-signal:
          requires:
            - validate-code
      - test-ios-integration:
          requires:
            - validate-code
      - test-tvos-core:
          requires:
            - validate-code
      - test-tvos-services:
          requires:
            - validate-code
      - test-tvos-lifecycle:
          requires:
            - validate-code
      - test-tvos-identity:
          requires:
            - validate-code
      - test-tvos-signal:
          requires:
            - validate-code
      - test-tvos-integration:
          requires:
            - validate-code
      - test-spm-podspec-archive:
          requires:
            - validate-code
          filters:
            branches:
              only:
                - main
                - staging

commands: 
  install_dependencies:
    steps:
          # restore pods related caches
      - restore_cache:
          keys:
            - 1-gems-{{ checksum "Gemfile.lock" }}

      # make sure we're on the right version of cocoapods
      - run:
          name: Verify Cocoapods Version
          command: bundle check || bundle install --path vendor/bundle

      # save cocoapods version gem data
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Pod install
          command: make ci-pod-install
      
      - run:
          name: Install xcodegen
          command: brew install xcodegen
        
  prestart_ios_simulator:
    steps:
      - macos/preboot-simulator:
          platform: "iOS"
          device: "iPhone 15"
          version: "17.4"

  prestart_tvos_simulator:
    steps:
      - macos/preboot-simulator:
          platform: "tvOS"
          device: "Apple TV"
          version: "17.4"
      
  parse_and_upload_coverage:
    description: "Convert .xcresult → Cobertura XML and upload to Codecov"
    parameters:
      # Directory or file created by -resultBundlePath (ex: build/AEPCore-ios.xcresult)
      path: { type: string }
      # Codecov flag (ex: aepcore-ios-tests)
      flag: { type: string }
    steps:
      - run:
          name: Install xcresultparser
          command: brew list xcresultparser || brew install xcresultparser

      - run:
          name: Parse .xcresult bundle(s)
          command: |
            set -eo pipefail
            mkdir -p ./build/coverage

            BUNDLE="<< parameters.path >>"

            if [ -d "$BUNDLE" ]; then
              echo "Directory given; searching for .xcresult…"
              RESULT_FILES=$(find "$BUNDLE" -name "*.xcresult")
              [ -z "$RESULT_FILES" ] && { echo "No .xcresult found"; exit 0; }

              # Merge if there is more than one bundle
              COUNT=$(echo "$RESULT_FILES" | wc -w)
              if [ "$COUNT" -gt 1 ]; then
                echo "Merging $COUNT result bundles"
                MERGE_CMD="xcrun xccov merge --output ./build/Merged.xcresult"
                for f in $RESULT_FILES; do MERGE_CMD="$MERGE_CMD $f"; done
                eval "$MERGE_CMD"
                xcresultparser --output-format cobertura ./build/Merged.xcresult > ./build/coverage/coverage.xml
              else
                echo "Single bundle found"
                xcresultparser --output-format cobertura $RESULT_FILES > ./build/coverage/coverage.xml
              fi
            else
              echo "File given; parsing $BUNDLE"
              xcresultparser --output-format cobertura "$BUNDLE" > ./build/coverage/coverage.xml
            fi

      - codecov/upload:
          files: ./build/coverage/coverage.xml
          flags: << parameters.flag >>
          upload_name: << parameters.flag >>
          disable_search: true

jobs:
  validate-code:
    macos:
      xcode: 16.0.0

    steps:
      - checkout

      - install_dependencies

      - run:
          name: Lint Source Code
          command: make lint
      
      - run:          
          name: Verify APIs
          command: make api-check

  test-ios-core:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_ios_simulator

      - run:
          name: Run AEPCore Tests
          command: make aep-core-unit-test

      - parse_and_upload_coverage:
          path: build/AEPCore-ios.xcresult
          flag: aepcore-ios-tests

  test-ios-services:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_ios_simulator

      - run:
          name: Run AEPServices Tests
          command: make aep-services-unit-test

      - parse_and_upload_coverage:
          path: build/AEPServices-ios.xcresult
          flag: aepservices-ios-tests
  
  test-ios-lifecycle:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_ios_simulator

      - run:
          name: Run AEPLifecycle Tests
          command: make aep-lifecycle-unit-test

      - parse_and_upload_coverage:
          path: build/AEPLifecycle-ios.xcresult
          flag: aeplifecycle-ios-tests

  test-ios-identity:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_ios_simulator

      - run:
          name: Run AEPIdentity Tests
          command: make aep-identity-unit-test

      - parse_and_upload_coverage:
          path: build/AEPIdentity-ios.xcresult
          flag: aepidentity-ios-tests

  test-ios-signal:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_ios_simulator

      - run:
          name: Run AEPSignal Tests
          command: make aep-signal-unit-test

      - parse_and_upload_coverage:
          path: build/AEPSignal-ios.xcresult
          flag: aepsignal-ios-tests

  test-ios-integration:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_ios_simulator
      
      - run:
          name: Run iOS integration Tests
          command: make integration-test

  test-tvos-core:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_tvos_simulator
      
      - run:
          name: Run AEPCore tvOS Tests
          command: make aep-core-tvos-unit-test

      - parse_and_upload_coverage:
          path: build/AEPCore-tvos.xcresult
          flag: aepcore-tvos-tests

  test-tvos-services:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_tvos_simulator
      
      - run:
          name: Run AEPServices tvOS Tests
          command: make aep-services-tvos-unit-test

      - parse_and_upload_coverage:
          path: build/AEPServices-tvos.xcresult
          flag: aepservices-tvos-tests

  test-tvos-lifecycle:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_tvos_simulator
      
      - run:
          name: Run AEPLifecycle tvOS Tests
          command: make aep-lifecycle-tvos-unit-test

      - parse_and_upload_coverage:
          path: build/AEPLifecycle-tvos.xcresult
          flag: aeplifecycle-tvos-tests

  test-tvos-identity:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_tvos_simulator
      
      - run:
          name: Run AEPIdentity tvOS Tests
          command: make aep-identity-tvos-unit-test

      - parse_and_upload_coverage:
          path: build/AEPIdentity-tvos.xcresult
          flag: aepidentity-tvos-tests

  test-tvos-signal:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_tvos_simulator
      
      - run:
          name: Run AEPSignal tvOS Tests
          command: make aep-signal-tvos-unit-test

      - parse_and_upload_coverage:
          path: build/AEPSignal-tvos.xcresult
          flag: aepsignal-tvos-tests

  test-tvos-integration:
    macos:
      xcode: 15.3.0
      resource_class: m4pro.medium

    steps:
      - checkout

      - install_dependencies

      - prestart_tvos_simulator
      
      - run:
          name: Run tvOS integration Tests
          command: make integration-tvos-test

  test-spm-podspec-archive:  
    macos:
      xcode: 15.3.0
    
    steps:
      - checkout

      - install_dependencies

      # verify XCFramework archive builds
      - run:
          name: Build XCFramework
          command: make ci-archive
      # verify podspec is valid
      - run:
          name: Test Podspec
          command: make test-podspec
      # verify SPM works
      - run:
          name: Test SPM 
          command: make test-SPM-integration